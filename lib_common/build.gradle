plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
}

android {
    namespace 'com.caisijie.common'
    compileSdk rootProject.android.complieSdk

    defaultConfig {
        minSdk rootProject.android.minSdk
        targetSdk rootProject.android.targetSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        //引入ARouter实现模块间相互调用通信（ARouter好像还是用在通信传递数据这样，需要定义接口统一，像调用其他模块中的类这种通过导入对应库的依赖就可以）
        kapt {//配置注解处理器，用于在编译时处理注解。它可以用于生成额外的代码、验证注解使用的正确性，或者执行其他与注解相关的任务。
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }
}

dependencies {
    compileOnly fileTree(dir: 'lib', include: ['*.jar'])
    compileOnly rootProject.depsLibs.coreKtx
    compileOnly rootProject.depsLibs.appcompat
    compileOnly rootProject.depsLibs.material
    compileOnly rootProject.depsLibs.constraintlayout

    compileOnly rootProject.depsLibs.refreshLayout
    compileOnly rootProject.depsLibs.refreshHeader
    compileOnly rootProject.depsLibs.refreshFooter

    compileOnly rootProject.depsLibs.aroutreApi
    kapt rootProject.depsLibs.arouterCompiler

    compileOnly project(path: ':lib_framework')
    compileOnly project(path: ':lib_banner')

}